{"version":3,"sources":["assets/loading.svg","assets/arrow-up-thick.svg","components/common/Text.js","components/List.js","components/common/ScrollToTop.js","components/common/Button.js","components/Search.js","components/Jobs.js","components/Header.js","components/Job.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SecondaryText","children","classes","className","PrimaryText","List","jobs","map","job","offset","moment","created_at","fromNow","url","id","key","href","company_logo","src","alt","type","title","company","location","ScrollToTop","useState","scrollToTopVisible","setScrollToTopVisible","useEffect","window","addEventListener","checkYOffset","pageYOffset","CSSTransition","in","timeout","classNames","unmountOnExit","onClick","scroll","scrollToTop","require","Button","Search","handleSubmit","size","color","name","placeholder","htmlFor","Jobs","loading","getJobs","jobsError","length","Header","Job","getJob","pathname","split","company_url","Url","host","redirectToCompanySite","dangerouslySetInnerHTML","__html","description","NotFound","App","setJobs","setJob","page","setPage","setLoading","setJobsError","a","search","axios","get","result","status","console","log","data","scrollTo","x","y","concat","interval","setInterval","forEach","clearInterval","path","exact","from","to","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.129d2ccc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.b87a4400.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-up-thick.19459e6a.svg\";","import React from \"react\";\n\nfunction SecondaryText({ children, className }) {\n  const classes = className + \" secondary-text\";\n  return <p className={classes}>{children}</p>;\n}\n\nfunction PrimaryText({ children, className }) {\n  const classes = className + \" primary-text\";\n  return <h2 className={classes}>{children}</h2>;\n}\n\nexport { SecondaryText, PrimaryText };\n","import React from \"react\";\nimport { SecondaryText, PrimaryText } from \"./common/Text\";\n\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\n\nconst List = ({ jobs }) => {\n  return (\n    <div className=\"jobs\">\n      {jobs &&\n        jobs.map((job) => {\n          var offset = moment(job.created_at).fromNow();\n          var url = \"/jobs/\" + job.id;\n          return (\n            <a key={job.id} href={url}>\n              <div className=\"job\">\n                <div className=\"image\">\n                  {job.company_logo ? (\n                    <img\n                      src={job.company_logo}\n                      alt=\"logo\"\n                      className=\"company-logo\"\n                    />\n                  ) : (\n                    <div className=\"company-logo\">n/a</div>\n                  )}\n                </div>\n                <div className=\"job-upper mt-4\">\n                  <SecondaryText className=\"m-1\">{offset}</SecondaryText>\n                  <SecondaryText className=\"m-1\">â€¢</SecondaryText>\n                  <SecondaryText className=\"m-1\">{job.type}</SecondaryText>\n                </div>\n                <div className=\"job-main m-1\">\n                  <PrimaryText className=\"\">{job.title}</PrimaryText>\n                  <SecondaryText className=\"\">{job.company}</SecondaryText>\n                </div>\n                <div className=\"job-footer\">\n                  <SecondaryText className=\"location-text\">\n                    {job.location}\n                  </SecondaryText>\n                </div>\n              </div>\n            </a>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default List;\n","import React, { useEffect, useState } from \"react\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport CSSTransition from \"react-transition-group/CSSTransition\";\n\nexport default function ScrollToTop() {\n  const [scrollToTopVisible, setScrollToTopVisible] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", checkYOffset);\n  }, []);\n\n  const checkYOffset = () => {\n    if (window.pageYOffset <= 1000) {\n      setScrollToTopVisible(false);\n    } else {\n      setScrollToTopVisible(true);\n    }\n  };\n  return (\n    <CSSTransition\n      in={scrollToTopVisible}\n      timeout={300}\n      classNames=\"scroll\"\n      unmountOnExit={true}\n    >\n      <div>\n        <button onClick={() => scroll.scrollToTop()} className=\"scroll-to-top\">\n          <img\n            src={require(\"../../assets/arrow-up-thick.svg\")}\n            alt=\"scroll-to-top\"\n          />\n        </button>\n      </div>\n    </CSSTransition>\n  );\n}\n","import React from \"react\";\n\nexport default function Button({ title, onClick, className = \"\" }) {\n  const classes = className + \" primary-button\";\n  return (\n    <button onClick={onClick} className={classes}>\n      {title}\n    </button>\n  );\n}\n","import React from \"react\";\nimport Button from \"./common/Button\";\n\nimport { FiSearch } from \"react-icons/fi\";\nimport { HiLocationMarker } from \"react-icons/hi\";\n\nexport default function Search({ handleSubmit }) {\n  return (\n    <form>\n      <div className=\"filters row\">\n        <div className=\"search col-5\">\n          <FiSearch size={40} color={\"#26193d\"} />\n          <input\n            name=\"search\"\n            id=\"search\"\n            placeholder=\"Filter by title, companies, expertise...\"\n          />\n        </div>\n        <div className=\"filter col\">\n          <HiLocationMarker size={40} color={\"#26193d\"} />\n          <input\n            name=\"location\"\n            id=\"location\"\n            placeholder=\"Filter By Location...\"\n          />\n        </div>\n        <div className=\"search-button col\">\n          <input name=\"full_time\" id=\"full-time\" type=\"checkbox\" />\n          <label htmlFor=\"full-time\" id=\"full-time-label\">\n            Full Time Only\n          </label>\n          <Button title=\"Search\" onClick={() => handleSubmit()} />\n        </div>\n      </div>\n    </form>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport List from \"./List\";\n\nimport ScrollToTop from \"./common/ScrollToTop\";\nimport Button from \"./common/Button\";\nimport { PrimaryText } from \"./common/Text\";\nimport Search from \"./Search\";\n\nexport default function Jobs({ jobs, loading, getJobs, jobsError }) {\n  useEffect(() => {\n    getJobs();\n  }, []);\n\n  if (loading && jobs.length <= 0) {\n    return (\n      <>\n        <div className=\"loading\">\n          <img src={require(\"../assets/loading.svg\")} alt=\"loading\" />\n        </div>\n      </>\n    );\n  } else {\n    if (jobs.length === 0) {\n      return (\n        <>\n          <PrimaryText className=\"text-center h1\">\n            There Are No Jobs\n          </PrimaryText>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <ScrollToTop />\n          <div className=\"container\">\n            <Search />\n            <List jobs={jobs} />\n            {loading && (\n              <div className=\"loading\">\n                <img src={require(\"../assets/loading.svg\")} alt=\"loading\" />\n              </div>\n            )}\n            {}\n            {jobs.length < 50 || jobsError ? (\n              <PrimaryText className=\"text-center\">\n                There Are No More Jobs\n              </PrimaryText>\n            ) : (\n              <Button title=\"Load More\" onClick={getJobs} />\n            )}\n          </div>\n        </>\n      );\n    }\n  }\n}\n","import React from \"react\";\nimport { PrimaryText } from \"./common/Text\";\n\nimport { FiSearch } from \"react-icons/fi\";\nimport { HiLocationMarker } from \"react-icons/hi\";\nimport Button from \"./common/Button\";\nexport default function Header({ handleSubmit }) {\n  return (\n    <div className=\"nav-background\">\n      <div className=\"container\">\n        <nav className=\"navbar\">\n          <div className=\"logo inverted\">\n            <PrimaryText className=\"h1 text-light\">\n              <a className=\"dev-logo\" href=\"/\">\n                devjobs\n              </a>\n            </PrimaryText>\n          </div>\n        </nav>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport Button from \"./common/Button\";\nimport { PrimaryText, SecondaryText } from \"./common/Text\";\nimport Url from \"url-parse\";\n\nexport default function Job({ getJob, job }) {\n  useEffect(() => {\n    let id = window.location.pathname.split(\"/\")[2];\n    getJob(id);\n  }, []);\n\n  const redirectToCompanySite = (redirectToCompanySite) => {\n    window.location.href = redirectToCompanySite;\n  };\n\n  if (job) {\n    const company_url = new Url(job.company_url);\n    return (\n      <div className=\"container custom-container\">\n        <div className=\"upper\">\n          {job.company_logo && (\n            <img src={job.company_logo} className=\"details-company-logo\" />\n          )}\n          <div className=\"company-details\">\n            <PrimaryText className=\"h2\">{job.company}</PrimaryText>\n            {company_url && <SecondaryText>{company_url.host}</SecondaryText>}\n          </div>\n          <Button\n            title=\"Company Site\"\n            className=\"company-site-button\"\n            onClick={() => redirectToCompanySite(job.company_url)}\n          />\n        </div>\n        <div className=\"job-body\">\n          <div\n            className=\"description\"\n            dangerouslySetInnerHTML={{ __html: job.description }}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <>\n        <div className=\"loading\">\n          <img src={require(\"../assets/loading.svg\")} alt=\"loading\" />\n        </div>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport { PrimaryText } from \"./common/Text\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"container text-center\">\n      <PrimaryText className=\"h1\">Page Not Found</PrimaryText>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Jobs from \"./components/Jobs\";\nimport Header from \"./components/Header\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport axios from \"axios\";\nimport Job from \"./components/Job\";\nimport NotFound from \"./components/NotFound\";\n\nfunction App() {\n  const [jobs, setJobs] = useState([]);\n  const [job, setJob] = useState();\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [jobsError, setJobsError] = useState(false);\n\n  const getJobs = async () => {\n    setLoading(true);\n    let result;\n    if (window.location.search) {\n      if (page === 1) {\n        setJobs([]);\n      }\n      const url =\n        \"https://jobs.github.com/positions.json?&page=\" +\n        page +\n        \"&\" +\n        window.location.search;\n      result = await axios.get(url);\n    } else {\n      result = await axios.get(\n        \"https://jobs.github.com/positions.json?&page=\" + page\n      );\n    }\n    if (result.status !== 200) console.log(\"Error From Server Side\");\n    setLoading(false);\n    setPage(page + 1);\n\n    if (result.data.length === 0) {\n      setJobsError(true);\n    } else {\n      setJobsError(false);\n      if (window.location.search) {\n        setJobs(jobs.concat(result.data));\n      } else {\n        window.scrollTo({ x: 0, y: window.pageYOffset });\n        setJobs(jobs.concat(result.data));\n      }\n    }\n  };\n\n  const getJob = async (id) => {\n    if (id.length < 36) {\n      window.location.pathname = \"/not-found\";\n    }\n    let page = 1;\n    const interval = setInterval(async () => {\n      const result = await axios.get(\n        \"https://jobs.github.com/positions.json?&page=\" + page\n      );\n      page++;\n      result.data.forEach((job) => {\n        if (job.id === id) {\n          setJob(job);\n          clearInterval(interval);\n        }\n      });\n      if (result.data.length === 0) {\n        window.location.pathname = \"/not-found\";\n        clearInterval(interval);\n      }\n    }, 1000);\n  };\n\n  return (\n    <>\n      <Header handleSubmit={getJobs} />\n      <Switch>\n        <Route path=\"/jobs/:id\">\n          <Job getJob={getJob} job={job} loading={loading} />\n        </Route>\n        <Route path=\"/jobs\">\n          <Jobs\n            jobs={jobs}\n            loading={loading}\n            jobsError={jobsError}\n            getJobs={getJobs}\n          />\n        </Route>\n        <Route exact path=\"/\">\n          <Jobs\n            jobs={jobs}\n            loading={loading}\n            jobsError={jobsError}\n            getJobs={getJobs}\n          />\n        </Route>\n        <Route path=\"/not-found\" exact>\n          <NotFound />\n        </Route>\n        <Redirect from=\"*\" exact to=\"/not-found\"></Redirect>\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}